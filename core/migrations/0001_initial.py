# Generated by Django 4.2.7 on 2025-09-28 01:16

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone",
                    models.CharField(
                        help_text="Phone number in format: +254XXXXXXXXX",
                        max_length=17,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+254XXXXXXXXX'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("RIDER", "Rider"),
                            ("DRIVER", "Driver"),
                            ("ADMIN", "Admin"),
                            ("CORP_ADMIN", "Corporate Admin"),
                            ("DISPATCHER", "Dispatcher"),
                        ],
                        default="RIDER",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CorporateAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("registration_number", models.CharField(max_length=100, unique=True)),
                ("billing_contact", models.CharField(max_length=255)),
                ("billing_email", models.EmailField(max_length=254)),
                ("billing_phone", models.CharField(max_length=20)),
                ("billing_address", models.TextField()),
                (
                    "balance",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12),
                ),
                (
                    "credit_limit",
                    models.DecimalField(
                        decimal_places=2, default=10000.0, max_digits=12
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Corporate Account",
                "verbose_name_plural": "Corporate Accounts",
                "db_table": "corporate_accounts",
            },
        ),
        migrations.CreateModel(
            name="Route",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("origin", models.CharField(max_length=255)),
                ("destination", models.CharField(max_length=255)),
                ("polyline", models.TextField(blank=True, null=True)),
                ("distance_km", models.FloatField(default=0.0)),
                ("estimated_duration_mins", models.IntegerField()),
                (
                    "base_fare",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Route",
                "verbose_name_plural": "Routes",
                "db_table": "routes",
            },
        ),
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=128)),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("MONTHLY", "Monthly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("price", models.IntegerField()),
                ("duration_days", models.IntegerField()),
                ("rides_limit", models.IntegerField(blank=True, null=True)),
                ("allow_rollover", models.BooleanField(default=True)),
                ("max_rollover_percentage", models.IntegerField(default=20)),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Subscription Plan",
                "verbose_name_plural": "Subscription Plans",
                "db_table": "subscription_plans",
            },
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("plate_number", models.CharField(max_length=20, unique=True)),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[
                            ("BUS", "Bus"),
                            ("MINIBUS", "Minibus"),
                            ("VAN", "Van"),
                        ],
                        default="BUS",
                        max_length=20,
                    ),
                ),
                ("capacity", models.IntegerField(default=50)),
                ("make", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("year", models.IntegerField()),
                ("color", models.CharField(max_length=50)),
                ("owner", models.CharField(max_length=255)),
                (
                    "owner_contact",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("MAINTENANCE", "Maintenance"),
                            ("INACTIVE", "Inactive"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("insurance_expiry", models.DateField(blank=True, null=True)),
                ("inspection_expiry", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Vehicle",
                "verbose_name_plural": "Vehicles",
                "db_table": "vehicles",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("avatar", models.URLField(blank=True, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MALE", "Male"),
                            ("FEMALE", "Female"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=17, null=True),
                ),
                (
                    "license_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("license_expiry", models.DateField(blank=True, null=True)),
                ("employee_id", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.corporateaccount",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Profile",
                "verbose_name_plural": "Profiles",
                "db_table": "profiles",
            },
        ),
        migrations.CreateModel(
            name="NotificationPreferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("push_enabled", models.BooleanField(default=True)),
                ("push_booking_confirmations", models.BooleanField(default=True)),
                ("push_reminders", models.BooleanField(default=True)),
                ("push_delays", models.BooleanField(default=True)),
                ("push_promotions", models.BooleanField(default=False)),
                ("email_enabled", models.BooleanField(default=True)),
                ("email_booking_confirmations", models.BooleanField(default=True)),
                ("email_receipts", models.BooleanField(default=True)),
                ("email_promotions", models.BooleanField(default=False)),
                ("sms_enabled", models.BooleanField(default=True)),
                ("sms_booking_confirmations", models.BooleanField(default=True)),
                ("sms_reminders", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification Preferences",
                "verbose_name_plural": "Notification Preferences",
                "db_table": "notification_preferences",
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("rides_remaining", models.IntegerField(default=0)),
                ("rollover_credits", models.IntegerField(default=0)),
                ("active", models.BooleanField(default=True)),
                ("auto_renew", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "corporate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.corporateaccount",
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.subscriptionplan",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "db_table": "subscriptions",
                "indexes": [
                    models.Index(
                        fields=["user", "active"], name="subscriptio_user_id_1dae94_idx"
                    ),
                    models.Index(
                        fields=["end_date", "active"],
                        name="subscriptio_end_dat_ab670f_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("departure_time", models.DateTimeField()),
                ("estimated_arrival_time", models.DateTimeField()),
                ("seats_total", models.IntegerField()),
                ("seats_booked", models.IntegerField(default=0)),
                ("seats_available", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("BOARDING", "Boarding"),
                            ("DEPARTED", "Departed"),
                            ("ARRIVED", "Arrived"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                    ),
                ),
                (
                    "fare_override",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "driver",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "DRIVER"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="core.route",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.vehicle",
                    ),
                ),
            ],
            options={
                "verbose_name": "Schedule",
                "verbose_name_plural": "Schedules",
                "db_table": "schedules",
                "indexes": [
                    models.Index(
                        fields=["departure_time", "route"],
                        name="schedules_departu_72d77b_idx",
                    ),
                    models.Index(
                        fields=["status", "departure_time"],
                        name="schedules_status_967139_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RouteStop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("sequence_order", models.IntegerField()),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stops",
                        to="core.route",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route Stop",
                "verbose_name_plural": "Route Stops",
                "db_table": "route_stops",
                "unique_together": {("route", "sequence_order")},
            },
        ),
        migrations.CreateModel(
            name="DriverLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("bearing", models.FloatField(blank=True, null=True)),
                ("speed", models.FloatField(blank=True, null=True)),
                ("accuracy", models.FloatField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "driver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Driver Location",
                "verbose_name_plural": "Driver Locations",
                "db_table": "driver_locations",
                "indexes": [
                    models.Index(
                        fields=["driver", "-timestamp"],
                        name="driver_loca_driver__67c437_idx",
                    )
                ],
            },
        ),
    ]
